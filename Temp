<style>
    .maindiv {
        margin: auto;
        width: 900px;
    }

    .maindiv p {
        margin-bottom: 5px;
        margin-top: 5px;
    }

    /*  ------------------------ Calendar ------------------------  */
    .calendar {
        font-family: 'Trebuchet MS', Tahoma, Verdana, Arial, sans-serif;
        font-size: 0.9em;
        background-color: #EEE;
        color: #333;
        border: 1px solid #DDD;
        -moz-border-radius: 4px;
        -webkit-border-radius: 4px;
        border-radius: 4px;
        padding: 0.2em;
        width: 14em;
    }
    .calendar .months {
        background-color: #F6AF3A;
        border: 1px solid #E78F08;
        -moz-border-radius: 4px;
        -webkit-border-radius: 4px;
        border-radius: 4px;
        color: #FFF;
        padding: 0.2em;
        text-align: center;
    }
    .calendar .prev-month,
    .calendar .next-month {
        padding: 0;
    }
    .calendar .prev-month {
        float: left;
    }
    .calendar .next-month {
        float: right;
    }
    .calendar .current-month {
        margin: 0 auto;
    }
    .calendar .months .prev-month,
    .calendar .months .next-month {
        color: #FFF;
        text-decoration: none;
        padding: 0 0.4em;
        -moz-border-radius: 4px;
        -webkit-border-radius: 4px;
        border-radius: 4px;
        cursor: pointer;
    }
    .calendar .months .prev-month:hover,
    .calendar .months .next-month:hover {
        background-color: #FDF5CE;
        color: #C77405;
    }
    .calendar table {
        border-collapse: collapse;
        padding: 0;
        font-size: 0.8em;
        width: 100%;
    }
    .calendar th {
        text-align: center;
    }
    .calendar td {
        text-align: right;
        padding: 1px;
        width: 14.3%;
    }
    .calendar td span {
        display: block;
        color: #1C94C4;
        background-color: #F6F6F6;
        border: 1px solid #CCC;
        text-decoration: none;
        padding: 0.2em;
        cursor: pointer;
    }
    .calendar td span:hover {
        color: #C77405;
        background-color: #FDF5CE;
        border: 1px solid #FBCB09;
    }
    .calendar td.today span {
        background-color: #FFF0A5;
        border: 1px solid #FED22F;
        color: #363636;
    }

    /*  ------------------------ MISC ------------------------  */
    .dt-row {
        border: 1px dashed #aaa;
        margin: 10px;
        display: table;
        width: 100%;
        table-layout: fixed;
        border-spacing: 10px;
    }
    .dt-column {
        display: table-cell;
    }
    .dt-w15 {
        width: 15%;
    } 
    .dt-w25 {
        width: 25%;
    }
    .dt-ctrl-approvers, 
    .dt-ctrl-approvers tr, 
    .dt-ctrl-approvers td {
        border: 0px;
    }
    .dt-ctrl-approvers select{
        width: 400px;
    }
    .maindiv input, 
    .maindiv select {
        margin-left: 10px;
    }
    .dt-group-wrapper {
        border: 0px;
    }
    #dt-routing-slip-table {
        width: 100%;
    }
    #dt-routing-slip-table td {
        border: 1px dashed #aaa;
    }
</style>
<script src="/style library/angular.min.js"></script>
<script type="text/javascript" src="/style library/datepickr.js"></script>
<div id="angular-app" ng-app="formExample">
    <div ng-form name="dtform" ng-controller="DocumentTracker" class="maindiv">
        <div><h2>OAS Document Tracker</h2></div>
        <fieldset ng-disabled="!(!data.status || data.status=='New')" class="dt-group-wrapper">
            <div class="dt-row">
                <div class="dt-column"><span>Date: </span><span>{{::data.initDate | date:'medium'}}</span></div>
                <div class="dt-column"><span>ID: </span><span>{{::data.id}}</span></div>
            </div>
            <div class="dt-row">
                <span>Document Type</span>
                <select ng-model="data.documentType" ng-options="item as item for item in data.allDocumentTypes" required>
                    <option ng-repeat="option in options" value="{{option}}">{{option}}</option>
                </select>
                <select-add-option ng-model="data.allDocumentTypes" set-variable="data.documentType" />
            </div>
            <div class="dt-row">
                <div class="dt-column dt-w15">
                    <p>Priority</p>
                    <input type="radio" ng-model="data.priority" id="dt-prior1" value="High" required /><label for="dt-prior1">High</label><br />
                    <input type="radio" ng-model="data.priority" id="dt-prior2" value="Standart" required /><label for="dt-prior2">Standart</label>
                </div>
                <div class="dt-column dt-w25">
                    <p>Due Date</p>
                    <datepickr ng-model="data.dueDate" />
                </div>
                <div class="dt-column" validate-on-change>
                    <p>Does this document containt sensetive information?</p>
                    <input type="radio" required ng-disabled="data.distribution == 'Attached'" ng-model="data.sensetive" id="dt-sens1" value="Yes" /><label for="dt-sens1">Yes. This document may not be distributed through the OAS tracker application</label><br />
                    <input type="radio" required ng-model="data.sensetive" id="dt-sens2" value="No" /><label for="dt-sens2">No</label>
                </div>
            </div>
            <div class="dt-row">
                <p>Subject/Title</p>
                <input type="text" ng-model="data.title" />
            </div>

            <!-- Attachment and Distribution-->
            <div class="dt-row">
                <p>Document Distribution Method</p>
                <input type="radio" required ng-model="data.distribution" id="dt-distr1" value="Attached" ng-disabled="data.sensetive=='Yes'" /><label for="dt-distr1">Attached</label>
                <input type="file" fileread="data.attachment" ng-show="data.distribution=='Attached'" />
                <input type="radio" required ng-model="data.distribution" id="dt-distr2" value="Email" /><label for="dt-distr2">Email</label>
                <input type="radio" required ng-model="data.distribution" id="dt-distr3" value="Hardcopy" /><label for="dt-distr3">Hardcopy</label><br />
                <ul ng-show="data.distribution=='Attached'">
                    <li ng-repeat="file in data.attachments">
                        <a ng-href="{{::file.url}}">{{::file.name}}</a>
                    </li>
                </ul>
            </div>

            <!--Creator comments-->
            <div class="dt-row">
                <div class="dt-column dt-w25"><span>Initiator: </span><span>{{::data.creator.name}}</span></div>
                <div class="dt-column"><span>Initiator comments</span><input type="text" ng-model="data.creatorComment" ng-disabled="!(!data.status || data.status == 'New' && session.currentUser.name == data.creator.name)" /></div>
            </div>

            <!--Editor comments-->
            <div class="dt-row" ng-show="session.currentUser && session.currentUser.name != data.creator.name">
                <div class="dt-column dt-w25"><span>Editor: </span><span>{{::data.editor.name}}</span></div>
                <div class="dt-column"><span>Editor comments</span><input type="text" ng-model="data.editorComment" /></div>
            </div>

            <!--Approvers-->
            <div class="dt-row">
                <my-double-box ng-model="data.approvers" option-source="data.allApprovers" />
            </div>

            <div class="dt-row" ng-show="!data.status || data.status == 'New'" style="position: relative;">
                <input type="button" ng-click="save()" value="Save" />
                <input type="button" ng-click="cancel()" value="Cancel" />
                <input type="button" ng-click="initiate()" value="Initiate" ng-disabled="dtform.$invalid || data.distribution == 'Attached' && !(data.attachment || data.hasAttachment)" />
                <input type="button" ng-show="data.status=='New'" ng-click="remove()" value="Remove" style="position: absolute; right: 20px;" />
            </div>

        </fieldset>
        <fieldset class="dt-group-wrapper">
            <div class="dt-row" ng-show="data.status == 'Process'">
                <table id="dt-routing-slip-table">
                    <thead class="dt-rs-row">
                        <tr>
                            <th class="dt-rs-column">Receiver</th>
                            <th class="dt-rs-column">Date routed</th>
                            <th class="dt-rs-column">Comment</th>
                            <th class="dt-rs-column"></th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr class="dt-rs-row">
                            <td class="dt-rs-column">Test User</td>
                            <td class="dt-rs-column">03/03/03</td>
                            <td class="dt-rs-column"><textarea ng-model="data.newComment" cols="40" rows="3"></textarea></td>
                            <td class="dt-rs-column"><input type="button" ng-click="addComment(data.commenter, data.newComment)" value="Sign" /></td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </fieldset>
    </div>
</div>
<script>
    var app = angular.module('formExample', []);
    // FACTORIES
    app.factory('Session', function (UtilFactory) {
        var listTitle = null;
        var itemId = null;
        var siteUrl = null;
        var isEditMode = function () {
            return window.location.pathname.indexOf('EditForm.aspx') > -1;
        };
        var getListTitle = function () {
            if (!listTitle) {
                var ar = window.location.pathname.split('/');
                listTitle =  ar[ar.indexOf("Lists") + 1];
            }
            return listTitle;
        };
        var getItemId = function () {
            if (!itemId)
                itemId = UtilFactory.getUrlParameterByName('ID');
            return itemId;
        };
        var getSiteUrl = function () {
            if (!siteUrl)
                siteUrl = window.location.origin + _spPageContextInfo.webServerRelativeUrl;
            return siteUrl;
        };
        var setItemId = function (id) {
            itemId = id;
        }
        return {
            isEditMode: isEditMode,
            getListTitle: getListTitle,
            getItemId: getItemId,
            getSiteUrl: getSiteUrl,
            setItemId: setItemId
        };
    });
    app.factory('ListDataFactory', function ($q, Session) {
        var fields = {
            'approver': { type: 'Person', name: 'Approver' },
            'approvers': { type: 'MultiPerson', name: 'Approvers' },
            'attachment': { type: 'Attachment', name: 'Attachment', readOnly: true },
            'hasAttachment': { type: 'Boolean', name: 'Attachments', readOnly: true },
            'comments': { type: 'JsonArray', name: 'Comments' },
            'commenter': { type: 'Text', name: 'CurrentApproverName' },
            'creator': { type: 'Person', name: 'Author', readOnly: true },
            'creatorComment': { type: 'Text', name: 'CreatorComment' },
            'initDate': { type: 'Date', name: 'Created', readOnly: true },
            'distribution': { type: 'Text', name: 'Distribution' },
            'documentType': { type: 'Text', name: 'DocumentType' },
            'dueDate': { type: 'Date', name: 'DueDate' },
            'editor': { type: 'Person', name: 'FormEditor' },
            'editorComment': { type: 'Text', name: 'EditorComment' },
            'id': { type: 'Number', name: 'ID', readOnly: true },
            'priority': { type: 'Text', name: 'Priority' },
            'sensetive': { type: 'Text', name: 'isSensetive' },
            'status': { type: 'Text', name: 'Status' },
            'title': { type: 'Text', name: 'Title' }
        };
        function parseDataToItem(data, item) {
            for (var key in fields) {
                var field = fields[key];
                if (field.readOnly) continue;
                var value = data[key];
                if (!value) continue
                var afterValue;
                switch (field.type) {
                    case 'MultiLookup':
                        var lookupsIds = typeof value == "string" ? value.split(',') : value;
                        var lookups = [];
                        for (var ii in lookupsIds) {
                            var lookupValue = new SP.FieldLookupValue();
                            lookupValue.set_lookupId(lookupsIds[ii]);
                            lookups.push(lookupValue);
                        }
                        afterValue = lookups;
                        break;
                    case 'JsonArray':
                        afterValue = angular.toJson(value);
                        break;
                    case 'Person':
                        afterValue = SP.FieldUserValue.fromUser(value.name);
                        afterValue.set_lookupId(value.id);
                        break;
                    case 'Date':
                        afterValue = new Date(value);
                        break;
                    case 'MultiPerson':
                        var lookups = [];
                        var values = angular.fromJson(value);
                        for (var i = 0; i < values.length; i++) {
                            var lookupValue = SP.FieldUserValue.fromUser(values[i].name);
                            lookupValue.set_lookupId(values[i].id);
                            lookups.push(lookupValue);
                        }
                        afterValue = lookups;
                        break;
                    default:
                        afterValue = value;
                }
                item.set_item(field.name, afterValue);
            }
            item.update();
        }
        var parseField = function (obj, field)  {
            var val = obj[field.name];

            switch (field.type) {
                case 'MultiLookup':
                    var s = [];
                    for (var i = 0; i < val.length; i++) {
                        var lv = val[i];
                        s.push(lv.get_lookupId());
                    }
                    val = s;
                    break;

                case 'JsonArray':
                    if (val == null) {
                        val = [];
                    } else {
                        val = JSON.parse(val);
                    }
                    break;

                case 'Person':
                    if (!val) return null;
                    var name = val.get_lookupValue();
                    var id = val.get_lookupId();
                    val = { name: name, id: id };
                    break;

                case 'MultiPerson':
                    if (!val) return null;
                    var s = [];
                    for (var i = 0; i < val.length; i++) {
                        var lv = val[i];
                        var name = lv.get_lookupValue();
                        var id = lv.get_lookupId();
                        s.push({ name: name, id: id });
                    }
                    val = s;
                    break;
            }

            return val;
        };
        var parseItemToData = function (item, attFiles) {
            var obj = item.get_fieldValues();
            var data = {};
            for (var key in fields) {
                var field = fields[key];
                var newVal = parseField(obj, field);
                if (newVal != null) data[key] = newVal;
            }
            if (attFiles.get_count()) {
                data.attachments = [];
                for (var i = 0; i < attFiles.get_count() ; i++) {
                    var file = attFiles.getItemAtIndex(i);
                    var name = file.get_name();
                    var url = file.get_serverRelativeUrl();
                    data.attachments.push({ name: name, url: url });
                }
            }
            return data;
        };
        var getAllItems = function (listTitle) {
            var deferred = $q.defer();
            var ctx = SP.ClientContext.get_current();
            var list = ctx.get_web().get_lists().getByTitle(listTitle);
            var query = SP.CamlQuery.createAllItemsQuery();
            var items = list.getItems(query);
            ctx.load(items);
            ctx.executeQueryAsync(
                function () {
                    var arr = [];
                    for (var i = 0; i < items.get_count() ; i++) {
                        var item = items.getItemAtIndex(i);
                        arr.push(item.get_fieldValues());
                    }
                    deferred.resolve(arr);
                },
                function () {
                    console.log('Error: ' + args.get_message() + '\n' + args.get_stackTrace());
                }
            );
            return deferred.promise;
        };
        var createItem = function (data) {
            var deferred = $q.defer();
            var ctx = SP.ClientContext.get_current();
            var item = ctx.get_web().get_lists().getByTitle(Session.getListTitle()).addItem();
            ctx.load(item);
            parseDataToItem(data, item);
            ctx.executeQueryAsync(function () {
                console.log("Item was created!", item);
                var oData = item.get_objectData()
                var id = oData.$X_0.get_identity().split(',')[0].split('item')[1].substring(1);
                Session.setItemId(id);
                deferred.resolve(id);
            });
            return deferred.promise;
        };
        var getItem = function () {
            var deferred = $q.defer();
            var ctx = SP.ClientContext.get_current();
            var item = ctx.get_web().get_lists().getByTitle(Session.getListTitle()).getItemById(Session.getItemId());
            var attachmentFolder = ctx.get_web().getFolderByServerRelativeUrl('Lists/' + Session.getListTitle() + '/Attachments/' + Session.getItemId());
            var attachmentFiles = attachmentFolder.get_files();
            ctx.load(attachmentFiles);
            ctx.load(item);
            ctx.executeQueryAsync(function () {
                var obj = parseItemToData(item, attachmentFiles);
                deferred.resolve(obj);
            });
            return deferred.promise;
        };
        var updateItem = function (data) {
            var deferred = $q.defer();
            var ctx = SP.ClientContext.get_current();
            var item = ctx.get_web().get_lists().getByTitle(Session.getListTitle()).getItemById(Session.getItemId());
            parseDataToItem(data, item);
            ctx.executeQueryAsync(function () {
                deferred.resolve(item);
            });
            return deferred.promise;
        };
        return {
            fields: fields,
            getAllItems: getAllItems,
            createItem: createItem,
            getItem: getItem,
            updateItem: updateItem,
            parseField: parseField,
            parseItemToData: parseItemToData
        };
    });
    app.factory('UserProfileFactory', function ($q) {
        var getCurrentUser = function () {
            var deferred = $q.defer();
            var context = new SP.ClientContext.get_current();
            var web = context.get_web();
            var currentUser = web.get_currentUser();
            currentUser.retrieve();
            context.load(web);
            context.executeQueryAsync(
                function () {
                    var userObject = web.get_currentUser();
                    var title = userObject.get_title();
                    var id = userObject.get_id();
                    deferred.resolve({ name: title, id: id });
                },
                function () {
                    console.log('Error: ' + args.get_message() + '\n' + args.get_stackTrace());
                }
            );
            return deferred.promise;
        };
        return {
            getCurrentUser: getCurrentUser
        };
    });
    app.factory('UtilFactory', function () {
        var getUrlParameterByName = function (name) {
            name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
            var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
                results = regex.exec(location.search);
            return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
        }
        var filterUnmodified = function(oldData, newData) {
            for (var key in oldData) {
                if (newData[key].toString() == oldData[key].toString()) {
                    delete newData[key];
                }
            }
        }
        return {
            getUrlParameterByName: getUrlParameterByName,
            filterUnmodified: filterUnmodified
        }
    });
    app.factory('SoapFactory', function ($q, Session) {
        function postItemAttachment(filename, binaryString) {
            var deferred = $q.defer();
            var Base64 = { _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", encode: function (e) { var t = ""; var n, r, i, s, o, u, a; var f = 0; e = Base64._utf8_encode(e); while (f < e.length) { n = e.charCodeAt(f++); r = e.charCodeAt(f++); i = e.charCodeAt(f++); s = n >> 2; o = (n & 3) << 4 | r >> 4; u = (r & 15) << 2 | i >> 6; a = i & 63; if (isNaN(r)) { u = a = 64 } else if (isNaN(i)) { a = 64 } t = t + this._keyStr.charAt(s) + this._keyStr.charAt(o) + this._keyStr.charAt(u) + this._keyStr.charAt(a) } return t }, decode: function (e) { var t = ""; var n, r, i; var s, o, u, a; var f = 0; e = e.replace(/[^A-Za-z0-9\+\/\=]/g, ""); while (f < e.length) { s = this._keyStr.indexOf(e.charAt(f++)); o = this._keyStr.indexOf(e.charAt(f++)); u = this._keyStr.indexOf(e.charAt(f++)); a = this._keyStr.indexOf(e.charAt(f++)); n = s << 2 | o >> 4; r = (o & 15) << 4 | u >> 2; i = (u & 3) << 6 | a; t = t + String.fromCharCode(n); if (u != 64) { t = t + String.fromCharCode(r) } if (a != 64) { t = t + String.fromCharCode(i) } } t = Base64._utf8_decode(t); return t }, _utf8_encode: function (e) { e = e.replace(/\r\n/g, "\n"); var t = ""; for (var n = 0; n < e.length; n++) { var r = e.charCodeAt(n); if (r < 128) { t += String.fromCharCode(r) } else if (r > 127 && r < 2048) { t += String.fromCharCode(r >> 6 | 192); t += String.fromCharCode(r & 63 | 128) } else { t += String.fromCharCode(r >> 12 | 224); t += String.fromCharCode(r >> 6 & 63 | 128); t += String.fromCharCode(r & 63 | 128) } } return t }, _utf8_decode: function (e) { var t = ""; var n = 0; var r = c1 = c2 = 0; while (n < e.length) { r = e.charCodeAt(n); if (r < 128) { t += String.fromCharCode(r); n++ } else if (r > 191 && r < 224) { c2 = e.charCodeAt(n + 1); t += String.fromCharCode((r & 31) << 6 | c2 & 63); n += 2 } else { c2 = e.charCodeAt(n + 1); c3 = e.charCodeAt(n + 2); t += String.fromCharCode((r & 15) << 12 | (c2 & 63) << 6 | c3 & 63); n += 3 } } return t } }
            var encodedString = Base64.encode(binaryString);
            var xmlhttp = new XMLHttpRequest();
            xmlhttp.open('POST', Session.getSiteUrl() + '_vti_bin/Lists.asmx', true);
            xmlhttp.setRequestHeader("SOAPAction", "http://schemas.microsoft.com/sharepoint/soap/AddAttachment");
            xmlhttp.setRequestHeader("Content-Type", 'text/xml; charset="utf-8"');
            var sr =
                '<?xml version="1.0" encoding="utf-8"?>' +
                '<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">' +
                    '<soap:Body>' +
                    '<AddAttachment xmlns="http://schemas.microsoft.com/sharepoint/soap/">' +
                        '<listName>' + Session.getListTitle() + '</listName>' +
                        '<listItemID>' + Session.getItemId() + '</listItemID>' +
                        '<fileName>' + filename + '</fileName>' +
                        '<attachment>' + encodedString + '</attachment>' +
                    '</AddAttachment>' +
                    '</soap:Body>' +
                '</soap:Envelope>';

            xmlhttp.onreadystatechange = function () {
                if (xmlhttp.readyState == 4) {
                    if (xmlhttp.status == 200) {
                        console.log(xmlhttp.responseText);
                        deferred.resolve(xmlhttp.responseText);
                    }
                }

                // TODO: add reject promise
            }
            xmlhttp.send(sr);
            return deferred.promise;
        }
        return {
            postItemAttachment: postItemAttachment
        };
    });

    // CONTROLLERS
    app.controller('DocumentTracker', ['$scope', 'UserProfileFactory', 'ListDataFactory', 'UtilFactory', 'SoapFactory', 'Session', '$q', function ($scope, UPF, ListFactory, Utils, Soap, Session, $q) {
        window.root = $scope; // for debugging
        $scope.data = {};
        $scope.session = {};
        $scope.data.allDocumentTypes = ['PDF', 'Doc'];
        $scope.runtimeValidationRules = [
            function () {
                if ($scope.data.distribution == "Attached" && $scope.data.sensetive == 'Yes') {
                    delete $scope.data.distribution;
                    $scope.$apply();
                }
                return $q.when([]);
            }
        ];
        $scope.afterQueryActions = [
            function () {
                if ($scope.data.attachment && ($scope.data.distribution == 'Attached' || Session.isEditMode() && !$scope.data.distribution)) {
                    return Soap.postItemAttachment($scope.data.attachment.filename, $scope.data.attachment.data);
                }
                return $q.when([]);
            }
        ];
        $scope.runActions = function (actions) {
            var promises = actions.map(function (action) {
                return action();
            });
            return $q.all(promises);
        }
        $scope.validateRuntime = function () {
            $scope.runActions($scope.runtimeValidationRules);
        };
        $scope.validateSubmit = function () {
            $scope.runActions($scope.submitValidationRules);
        };
        $scope.goBackToList = function () {
            var s = window.location.href;
            var i = s.indexOf('/NewForm');
            if (i == -1) i = s.indexOf('/EditForm');
            var x = s.substr(0, i);
            window.location = x;
        };
        $scope.initForm = function() { 
            function getCurrentUser() {
                UPF.getCurrentUser().then(function (d) {
                    $scope.session.currentUser = d;
                    if (!$scope.data.status) { $scope.data.creator = $scope.session.currentUser; }
                    else if ($scope.data.status == "New" && $scope.data.creator != $scope.session.currentUser) {
                            $scope.data.editor = $scope.session.currentUser;
                        }
                });
            }
            function getAllApprovers() {
                ListFactory.getAllItems('Approvers').then(function (items) {
                    var arr = [];
                    for (var i = 0; i < items.length; i++) {
                        var item = items[i];
                        arr.push(ListFactory.parseField(item, ListFactory.fields.approver));
                    }
                    if ($scope.data.approvers) {
                        arr = arr.filter(function (el) {
                            return $scope.data.approvers.map(function (e) { return e.name; }).indexOf(el.name) < 0;
                        });
                    }
                    $scope.data.allApprovers = arr;
                });
            } 
                 
            SP.SOD.executeOrDelayUntilScriptLoaded(function () { 
                if (Session.isEditMode()) {
                    ListFactory.getItem().then(function (obj) {
                        $scope.data = angular.merge($scope.data, obj);
                        if ($scope.data.allDocumentTypes.indexOf($scope.data.documentType) == -1) {
                            $scope.data.allDocumentTypes.push($scope.data.documentType);
                        }
                        $scope.master = angular.copy($scope.data);
                        getAllApprovers();
                        getCurrentUser();
                    });                         
                } else {
                    getAllApprovers();
                    getCurrentUser();
                }
            }, 'SP.js');
        }            
        $scope.cancel = function () {
            $scope.goBackToList();
        };
        $scope.initiate = function () {
            $scope.data.status = "Process";
            $scope.write();
        };
        $scope.save = function () {
            $scope.data.status = "New";
            $scope.write();
        };
        $scope.write = function () {
            function afterActions() {
                $scope.runActions($scope.afterQueryActions).then(function () {
                    $scope.goBackToList();
                });
            }
            if (Session.isEditMode()) {
                Utils.filterUnmodified($scope.master, $scope.data);
                ListFactory.updateItem($scope.data).then(afterActions);

            } else {
                ListFactory.createItem($scope.data).then(afterActions);
            }
        };
        $scope.remove = function () {
            $scope.data.status = "Cancelled";
            $scope.write();
        };
        $scope.addComment = function (person, comment) {
            $scope.data.comments.push({ Name: person, Comment: comment });
            $scope.save(); // TODO: Change to Update instead of Save
        };
        $scope.initForm();
    }]);

    // DIRECTIVES
    app.directive('myDoubleBox', function ($timeout) {
        return {
            restrict: 'E',
            scope: {
                ngModel: '=',
                options: '=optionSource'
            },
            template: '<table class="dt-ctrl-approvers" border="1" align="center" style="border-collapse:collapse;"><tr valign="top"><td>' +
                '<select ng-dblclick="onClickRight()" ng-click="onClickSL()" size="10">' +
                    '<option ng-repeat="option1 in options" value="{{option1.id}}">{{option1.name}}</option>' +
                '</select></td><td valign="middle">' +
                    '<input type="button" ng-click="onClickRight()" class="moveRight" value="►" ng-disabled="options.length==0 || rDisabled" /><br />' +
                    '<input type="button" ng-click="onClickLeft()" class="moveLeft" value="◄" ng-disabled="ngModel.length==0 || lDisabled"/></td><td>' +
                '<select size="10" ng-dblclick="onClickLeft()" ng-click="onClickSR()" >' +
                    '<option ng-repeat="option2 in ngModel" value="{{option2.id}}">{{option2.name}}</option>' +
                '</select></td></tr><tr><td></td><td></td><td>' +
                    '<input type="button" class="moveUp" value="▲" ng-click="moveUpDown(false)" ng-disabled="ngModel.length<=1 || uDisabled" />' +
                    '<input type="button" class="moveDown" value="▼" ng-click="moveUpDown(true)" ng-disabled="ngModel.length<=1 || dDisabled" />' +
                '</td></tr></table>',
            controller: ['$scope', '$element', function (scope, element) {
                scope.ngModel = [];
                var sels = element.find('select');
                var selA = sels[0];
                var selB = sels[1];
                    
                scope.rDisabled = true;
                scope.lDisabled = true;
                scope.uDisabled = true;
                scope.dDisabled = true;

                scope.onClickSL = function () {
                    scope.rDisabled = selA.selectedIndex == -1;
                }

                scope.onClickSR = function () {
                    scope.lDisabled = selB.selectedIndex == -1;
                    scope.dDisabled = selB.selectedIndex == selB.length - 1;
                    scope.uDisabled = selB.selectedIndex == 0;
                }

                scope.moveUpDown = function (isDown) {
                    var index = selB.selectedIndex;
                    if (index == -1) { console.log("Please select an option to move."); return; }
                    var temp = scope.ngModel[index];
                    if (isDown) { 
                        scope.ngModel[index] = scope.ngModel[index + 1];
                        scope.ngModel[index + 1] = temp;
                        scope.dDisabled = index >= selB.length - 2;
                        scope.uDisabled = false;
                    } else {
                        scope.ngModel[index] = scope.ngModel[index - 1];
                        scope.ngModel[index - 1] = temp;
                        scope.uDisabled = index < 2;
                        scope.dDisabled = false;
                    }
                }

                scope.onClickLR = function (sel, arrFrom, arrTo) {
                    var index = sel.selectedIndex;
                    if (index === -1) { console.log("Please select an option to move."); return; }
                    var item = arrFrom[index];
                    arrTo.push(item);
                    arrFrom.splice(index, 1);
                    sel.selectedIndex = -1;    
                }

                scope.onClickRight = function () {
                    scope.onClickLR(selA, scope.options, scope.ngModel);
                    scope.rDisabled = true;
                };
                scope.onClickLeft = function () {
                    scope.onClickLR(selB, scope.ngModel, scope.options);
                    scope.lDisabled = true;
                    scope.uDisabled = true;
                    scope.dDisabled = true;
                };
            }]
        };
    });
    app.directive("datepickr", function () {
        return {
            require: "ngModel",
            template: '<input ng-model="dueDate" ng-change="onDateChange()" type="text" readonly="true">',
            controller: ['$scope', '$element', function (scope, element) {
                var config = {
                    'dateFormat': 'm/d/y'
                }
                new datepickr(element[0].children[0], config);
            }],
            link: function (scope, element, attrs, ngModel) {
                scope.onDateChange = function () {
                    ngModel.$setViewValue(scope.dueDate);
                };
                ngModel.$render = function () {
                    if (!ngModel.$modelValue) return;
                    var date = new Date(ngModel.$modelValue);
                    var newDate = (date.getMonth() + 1) + '/' + date.getDate() + '/' + date.getFullYear();
                    ngModel.$modelValue = newDate;
                    scope.dueDate = ngModel.$modelValue;
                };
            }
        };
    });
    app.directive("fileread", [function () {
        return {
            scope: {
                fileread: "="
            },
            link: function (scope, element, attributes) {
                element.bind("change", function (changeEvent) {
                    var reader = new FileReader();
                    var filename = changeEvent.target.files[0].name;
                    reader.onload = function (loadEvent) {
                        scope.$apply(function () {
                            scope.fileread = { filename: filename, data: loadEvent.target.result };
                        });
                    }
                    reader.readAsBinaryString(changeEvent.target.files[0]);
                });
            }
        }
    }]);
    app.directive('myComments', function () {
        return {
            require: '?ngModel',
            template: '<p ng-repeat="comment in data.comments">{{::comment.Name}}: {{::comment.Comment}}</p>',
        };
    });
    app.directive("selectAddOption", function ($parse) {
        return {
            restrict: 'E',
            require: "ngModel",
            scope: {
                ngModel: '=',
                setVariable: '='
            },
            link: function (scope, element, attrs, ngModel) {
                scope.addOption = function () {
                    if (ngModel.$viewValue.indexOf(scope.newOption) > -1) return;
                    if (typeof scope.newOption == 'undefined' || scope.newOption == '') return;
                    ngModel.$viewValue.push(scope.newOption);
                    ngModel.$setViewValue(ngModel.$viewValue);
                    scope.setVariable = scope.newOption;
                }
            },
            template: '<input type="text" ng-model="newOption"></input>' +
                '<input type="button" ng-click="addOption()" value="Add"></input>',
        }
    });
    app.directive("validateOnChange", function ($parse) {
        return {
            link: function (scope, element, attrs) {
                var cb = $parse(attrs.formOnChange);
                element.on("change", function () {
                    cb(scope);
                    scope.validateRuntime();
                });
            }
        }
    });

    // TODO: set nextApprover field
    // TODO: validate required fields before Initiate
    // TODO: Workflow to set InitDate from Modified Date
</script>
